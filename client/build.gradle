group 'org.webscene'
version '0.1-SNAPSHOT'

boolean deleteDirectory(File directory) {
    //noinspection GroovyUnusedAssignment
    File[] files = null

    if (directory.exists()) {
        files = directory.listFiles()
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deleteDirectory(files[i])
                } else {
                    files[i].delete()
                }
            }
        }
    }
    return directory.delete()
}

buildscript {
    ext {
        KOTLIN_VER = '1.1.1'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VER"
    }
}

apply plugin: 'kotlin2js'

def programName = 'webstack-client'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$KOTLIN_VER"
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

compileKotlin2Js {
    kotlinOptions.outputFile = "${projectDir}/web/js/${programName}.js"
}

compileKotlin2Js.doLast {
    def oldDir = new File("${projectDir.absolutePath}/web/js/${programName}")

    deleteDirectory(oldDir)
}

task deployClientToServer(type: Sync) {
    dependsOn 'build'
    dependsOn 'compileKotlin2Js'

    def src = "${projectDir.absolutePath}/web"
    def dest = "${projectDir.parent}/server/public"

    from src
    into dest
}

build.doLast {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${projectDir}/web/js"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }
}